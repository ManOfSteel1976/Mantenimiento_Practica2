DequeNode
- Comprobar que el constructor creado tiene los valores que se le han puesto.
	* testDequeNodeConstructorShouldReturnSameValueItem()
	* testDequeNodeConstructorShouldReturnSameValueNext()
	* testDequeNodeConstructorShouldReturnSameValuePrevious()
- Testear que si hago un setItem en un nodo, su valor cambia.
    * testSetItemShouldChangeItemValue()
- Testear que si hago un setNext en un nodo, su nodo posterior cambia.
    * testSetNextShouldChangeNextNode()
- Testear que si hago un setPrevious en un nodo, su nodo anterior cambia.
    * testSetPreviousShouldChangePreviousNode()
- Testear que si hago un setItem en un nodo, al hacer getItem da el mismo valor.
	* testGetItemShouldReturnItemValue()
- Testear que si hago un setNext en un nodo, al hacer getNext da el mismo valor.
	* testGetNextShouldReturnNextNode()
	* testGetNextReturnsNullIfNextNodeIsNull()
- Testear que si hago un setPrevious en un nodo, al hacer getPrevious da el mismo valor.
	* testGetPreviousShouldReturnPreviousNode()
	* testGetPreviousReturnsNullIfPreviousNodeIsNull()
- Comprobar que el anterior al primer nodo es nulo.
    * testPreviousNodeToFirstShouldReturnNull()
- Comprobar que el posterior al último nodo es nulo.
    * testNextNodeToLastShouldReturnNull()
- Comprobar que que si un nodo es no terminal el anterior nodo no es nulo.
    * IfisNotATerminalNodeTheNextsNodeIsNotNull()
- Comprobar que que si un nodo es no terminal el posterior nodo no es nulo.
    * IfisNotATerminalNodeThePreviousNodeIsNotNull()
- Comprobar que si un nodo es no terminal tanto los nodos anterior como posterior no son nulos.
    * IfisNotATerminalNodeThePreviousNodeAndTheNextAreNotNull()

DoubleLinkedListQueue
- Comprobar que si añades un nodo al principio (appendLeft), al usar peekFirst da el valor introducido.
	* testAppendLeftShouldInsertNodeAtStart()
- Comprobar que si añades un nodo al final (append), al usar peekLast da el valor introducido.
	* testAppendShouldInsertNodeAtEnd()
- Comprobar que si añades un nodo nulo al principio, da error.
	* testAppendLeftNullNodeRaiseAnException()
- Comprobar que si añades un nodo nulo al final, da error.
	* testAppendNullNodeRaiseAnException()
- Comprobar que tras varias inserciones y varios borrados, el tamaño de la lista es correcto
	* testSizeOfQueueWithFourAppendsAndTwoDeletesShouldReturnTwo()
- Comprobar que si haces un append a una lista vacía, el valor es igual a peekFirst y peekLast.
    * testIfAppendEmptyListValueIsPeekFirst()
    * testIfAppendEmptyListValueIsPeekLast()
- Comprobar que si haces un appendLeft a una lista vacía, el valor es igual a peekFirst y peekLast.
    * testIfAppendLeftEmptyListValueIsPeekFirst()
    * testIfAppendLeftEmptyListValueIsPeekLast()
- Comprobar que si tratas de borrar el primer elemento de una lista vacía da error.
    * testDeletingFirstOfAnEmptyListShouldRaiseAnException()
- Comprobar que si tratas de borrar el último elemento de una lista vacía da error.
    * testDeletingLastOfAnEmptyListShouldRaiseAnException()
- Comprobar que si al borrar el primer elemento, el valor del segundo es igual al nuevo primero tras la eliminación.
    * testByDeletingFirstTheValuesOfSecondNodeAndNewFirstNodeShouldBeEqual()
- Comprobar que si al borrar el último elemento, el valor del penúltimo es igual al nuevo último tras la eliminación.
    * testByDeletingLastTheValuesOfSecondToLastNodeAndNewLastNodeShouldBeEqual()
- Commprobar que si se borra un elemento de una lista de un solo elemento, el resultado es una lista vacía
    * testDeletingFirstOfOneItemListShouldReturnEmptyList()
    * testDeletingLastOfOneItemListShouldReturnEmptyList()